{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.findCity.html","webpack:///src/app/app.module.ts","webpack:///src/app/city-search.service.ts","webpack:///src/app/current-weather.service.ts","webpack:///src/app/pages/weather-table/weather-table.component.ts","webpack:///src/app/pages/weather-table/weather-table.component.html","webpack:///src/app/weather-forecast.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","citySearchService","currentWeatherService","weatherForecastService","today","Date","now","item","send","subscribe","response","data","cities","list","cityid","idWeather","weather","listForecast","forecast","selector","templateUrl","inputs","routes","path","component","AppModule","forRoot","declarations","imports","providers","bootstrap","AppRoutingModule","CitySearchService","http","citiesUrl","appId","url","String","concat","get","toString","providedIn","CurrentWeatherService","weatherUrl","WeatherTableComponent","WeatherForecastService","forecastUrl","environment","production","bootstrapModule","catch","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { CitySearchService } from './city-search.service';\r\nimport { CurrentWeatherService } from './current-weather.service';\r\nimport { WeatherForecastService } from './weather-forecast.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.findCity.html',\r\n  inputs: ['item.cityName'] \r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n  data:any;\r\n\r\n  item: any;\r\n\r\n  body: any;\r\n\r\n  cities: any;\r\n\r\n  weather: any;\r\n\r\n  forecast: any;\r\n\r\n  today: number = Date.now();\r\n\r\n \r\n\r\n  constructor(private citySearchService: CitySearchService, private currentWeatherService: CurrentWeatherService, private weatherForecastService : WeatherForecastService){}\r\n\r\n\r\nngOnInit(){\r\n  this.item = {};\r\n}\r\n\r\n\r\nsend(item : any,){\r\n\r\n\r\n  \r\n  this.citySearchService.send(item).subscribe(response => { this.data = response;  this.cities = this.data.list})\r\n     \r\n    }\r\n\r\n\r\n  idWeather(cityid : any){\r\n\r\n    return this.currentWeatherService.idWeather(cityid).subscribe(response => { this.weather = [response]})\r\n\r\n    };\r\n\r\n    listForecast(cityid : any){\r\n\r\n\r\n     return this.weatherForecastService.listForecast(cityid).subscribe(response => {  this.data = response; this.forecast = this.data.list})\r\n\r\n      };\r\n}\r\n","<mat-card class=\"head-card\">\r\n\r\n  <p class=\"head-text\">Weather in your city</p>\r\n\r\n  <form method=\"post\" (ngSubmit)=\"send(item.city) ; this.weather = []\" class=\"example-form\">\r\n    <mat-form-field appearance=\"legacy\" class=\"example-full-width\">\r\n      <mat-card>\r\n\r\n        <div class=\"header-column\"> <input matInput type=\"text\" name=\"cityName\" id=\"cityName\"\r\n            placeholder=\"Your City Name\" [(ngModel)]=\"item.city\"> </div>\r\n            <mat-icon (click)=\"send(item.city) ; this.weather = []\" class=\"search\"> <span class=\"material-icons\">\r\n              search\r\n              </span></mat-icon>\r\n        \r\n\r\n      </mat-card>\r\n\r\n    </mat-form-field>\r\n\r\n  </form>\r\n\r\n  <li *ngFor=\"let c of cities\" class=\"card-list\">\r\n\r\n    <mat-card (click)=\"idWeather(c.id) ; listForecast(c.id) ; this.cities = [] \">\r\n\r\n      <div class=\"column\">\r\n        <mat-card class=\"card-temp\">\r\n          <p>{{c.main.temp.toFixed(1)}}°С</p>\r\n        </mat-card>\r\n      </div>\r\n      <div class=\"column card-name\">\r\n        <p>{{c.name}}, {{c.sys.country}} <img\r\n            src=\"http://openweathermap.org/images/flags/{{ c.sys.country | lowercase }}.png\"></p>\r\n\r\n        <div class=\"card-max\">\r\n          <div class=\"column \">\r\n            <p>Max.</p>\r\n          </div>\r\n          <p class=\"column card-result\">{{c.main.temp_max.toFixed(1)}}</p>\r\n          <div class=\"column\">\r\n            <p>Min.</p>\r\n          </div>\r\n          <p class=\"column card-result1\">{{c.main.temp_min.toFixed(1)}}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"column card-icon\">\r\n\r\n        <img src=\"https://openweathermap.org/img/w/{{c.weather[0].icon}}.png\">\r\n\r\n        <p>{{c.weather[0].main}}</p>\r\n\r\n      </div>\r\n    </mat-card>\r\n\r\n  </li>\r\n\r\n  <li *ngFor=\"let w of weather\" class=\"card-weather\">\r\n    <hr>\r\n    <p class=\"weather-text\">Weather in {{w.name}}, {{w.sys.country}}</p>\r\n    <p class=\"date-text\">{{today | date:'hh:mm LLL d'}}</p>\r\n\r\n    <mat-card>\r\n\r\n      <mat-card class=\"weather-temp\">\r\n        <p class=\"card-back\">{{w.main.temp.toFixed(1)}}°С</p>\r\n\r\n        <div class=\"column card-icon\">\r\n\r\n          <img src=\"https://openweathermap.org/img/w/{{w.weather[0].icon}}.png\">\r\n\r\n          <p>{{w.weather[0].main}}</p>\r\n\r\n        </div>\r\n      </mat-card>\r\n      <div class=\"column\">\r\n\r\n        <p>Max.</p>\r\n        <p>Min.</p>\r\n        <p>Sunrise.</p>\r\n        <p>Sunset.</p>\r\n      </div>\r\n      <div class=\"column\">\r\n\r\n        <p class=\"card-result\">{{w.main.temp_max.toFixed(1)}}</p>\r\n\r\n        <p class=\"column card-result1\">{{w.main.temp_min.toFixed(1)}}</p>\r\n\r\n\r\n        <p>{{(w.sys.sunrise * 1000)  + (w.timezone * 60) |date:'HH:mm'  }}</p>\r\n\r\n        <p>{{(w.sys.sunset * 1000)  + (w.timezone * 60) |date:'HH:mm' }}</p>\r\n\r\n      </div>\r\n\r\n      <div class=\"card-textside\">\r\n        <hr>\r\n        <hr>\r\n      </div>\r\n\r\n      <div class=\"column \">\r\n        <p class=\"card-textside\">5 day weather forecast</p>\r\n      </div>\r\n      <div class=\"column \">\r\n        <p class=\"date-text2\">every 3 hours</p>\r\n      </div>\r\n\r\n\r\n  <li *ngFor=\"let f of forecast\" class=\"card-forecast\">\r\n\r\n    <mat-card>\r\n\r\n      <div class=\"weather-column\">\r\n\r\n        <p class=\"date-text1\">{{f.dt_txt | date:'EEE d LLL'}}</p>\r\n        <p class=\"date-text2\">{{f.dt_txt | date:'hh:mm '}}</p>\r\n\r\n      </div>\r\n\r\n\r\n      <div class=\"weather-column\">\r\n\r\n        <p> <img src=\"https://openweathermap.org/img/w/{{f.weather[0].icon}}.png\">{{f.weather[0].main}}</p>\r\n\r\n      </div>\r\n\r\n      <div class=\"weather-column card-resultside\">\r\n        <p>{{f.main.temp_max.toFixed(1)}} °C</p>\r\n      </div>\r\n\r\n      <div class=\"weather-column card-result1\">\r\n        <p>{{f.main.temp_min.toFixed(1)}} °C</p>\r\n      </div>\r\n\r\n    </mat-card>\r\n\r\n  </li>\r\n\r\n</mat-card>\r\n\r\n</li>\r\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { CitySearchService } from './city-search.service';\r\nimport { WeatherForecastService } from './weather-forecast.service';\r\nimport { WeatherTableComponent } from './pages/weather-table/weather-table.component';\r\n\r\nconst routes: Routes = [\r\n\r\n  { path: 'list', component: WeatherTableComponent}\r\n\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    WeatherTableComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [ RouterModule ],\r\n  providers: [CitySearchService , WeatherForecastService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\nexport class AppRoutingModule {}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CitySearchService {\r\n\r\n  //emitCities = new EventEmitter<String>()\r\n\r\n  //static makeCity = new EventEmitter<String>()\r\n\r\n  citiesUrl = 'https://api.openweathermap.org/data/2.5/find?'\r\n  appId= 'appid=76d1b43ba3695cfae59aa9f7dc9b4877'\r\n\r\n  constructor(private http: HttpClient) {}  \r\n\r\nsend(item:any) {\r\n  let url = new String(this.citiesUrl);\r\n  url = url.concat(\"q=\",item, \"&\", this.appId, \"&units=metric\");\r\n  return this.http.get<[]>(url.toString())\r\n  \r\n  \r\n\r\n  // this.emitCities.emit(item)\r\n}\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http'\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CurrentWeatherService {\r\n\r\n  //emitWeather = new EventEmitter<String>()\r\n\r\n  weatherUrl = 'https://api.openweathermap.org/data/2.5/weather?'\r\n  appId= 'appid=76d1b43ba3695cfae59aa9f7dc9b4877'\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n\r\nidWeather(cityid:any)  {\r\n  let url = new String(this.weatherUrl);\r\n  url = url.concat(\"id=\",cityid, \"&\", this.appId, \"&units=metric\");\r\n  return this.http.get<Array<[any]>>(url.toString())\r\n  //this.emitWeather.emit(cityid)\r\n}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-weather-table',\r\n  templateUrl: './weather-table.component.html',\r\n})\r\nexport class WeatherTableComponent implements OnInit {\r\n\r\n  cities : any\r\n\r\n  weather: any;\r\n\r\n  forecast: Array<any>;\r\n\r\n  today: number = Date.now();\r\n\r\n  constructor(){}\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n}\r\n","\r\n\r\n<mat-card class=\"head-card\">\r\n\r\n  <p class=\"head-text\">Weather in your city</p>\r\n\r\n  <form method=\"post\" (ngSubmit)=\"this.weather = []\" class=\"example-form\">\r\n    <mat-form-field appearance=\"legacy\" class=\"example-full-width\">\r\n      <mat-card>\r\n\r\n        <div class=\"header-column\"> <input matInput type=\"text\" name=\"cityName\" id=\"cityName\"\r\n            placeholder=\"Your City Name\" </div>\r\n        <mat-icon matSuffix (click)=\" this.weather = []\" class=\"ion-android-search\"></mat-icon>\r\n\r\n      </mat-card>\r\n\r\n    </mat-form-field>\r\n\r\n  </form>\r\n\r\n\r\n  <li *ngFor=\"let w of weather\" class=\"card-weather\">\r\n    <hr>\r\n    <p class=\"weather-text\">Weather in {{w.name}}, {{w.sys.country}}</p>\r\n    <p class=\"date-text\">{{today | date:'hh:mm LLL d'}}</p>\r\n\r\n    <mat-card>\r\n\r\n      <mat-card class=\"weather-temp\">\r\n        <p class=\"card-back\">{{w.main.temp.toFixed(1)}}°С</p>\r\n\r\n        <div class=\"column card-icon\">\r\n\r\n          <img src=\"https://openweathermap.org/img/w/{{w.weather[0].icon}}.png\">\r\n\r\n          <p>{{w.weather[0].main}}</p>\r\n\r\n        </div>\r\n      </mat-card>\r\n      <div class=\"column\">\r\n\r\n        <p>Max.</p>\r\n        <p>Min.</p>\r\n        <p>Sunrise.</p>\r\n        <p>Sunset.</p>\r\n      </div>\r\n      <div class=\"column\">\r\n\r\n        <p class=\"card-result\">{{w.main.temp_max.toFixed(1)}}</p>\r\n\r\n        <p class=\"column card-result1\">{{w.main.temp_min.toFixed(1)}}</p>\r\n\r\n\r\n        <p>{{(w.sys.sunrise * 1000)  + (w.timezone * 60) |date:'HH:mm'  }}</p>\r\n\r\n        <p>{{(w.sys.sunset * 1000)  + (w.timezone * 60) |date:'HH:mm' }}</p>\r\n\r\n      </div>\r\n\r\n      <div class=\"card-textside\">\r\n        <hr>\r\n        <hr>\r\n      </div>\r\n\r\n      <div class=\"column \">\r\n        <p class=\"card-textside\">5 day weather forecast</p>\r\n      </div>\r\n      <div class=\"column \">\r\n        <p class=\"date-text2\">every 3 hours</p>\r\n      </div>\r\n\r\n\r\n  <li *ngFor=\"let f of forecast\" class=\"card-forecast\">\r\n\r\n    <mat-card>\r\n\r\n      <div class=\"weather-column\">\r\n\r\n        <p class=\"date-text1\">{{f.dt_txt | date:'EEE d LLL'}}</p>\r\n        <p class=\"date-text2\">{{f.dt_txt | date:'hh:mm '}}</p>\r\n\r\n      </div>\r\n\r\n\r\n      <div class=\"weather-column\">\r\n\r\n        <p> <img src=\"https://openweathermap.org/img/w/{{f.weather[0].icon}}.png\">{{f.weather[0].main}}</p>\r\n\r\n      </div>\r\n\r\n      <div class=\"weather-column card-resultside\">\r\n        <p>{{f.main.temp_max.toFixed(1)}} °C</p>\r\n      </div>\r\n\r\n      <div class=\"weather-column card-result1\">\r\n        <p>{{f.main.temp_min.toFixed(1)}} °C</p>\r\n      </div>\r\n\r\n    </mat-card>\r\n\r\n  </li>\r\n\r\n</mat-card>\r\n\r\n</li>\r\n\r\n  <router-outlet></router-outlet>\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http'\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class WeatherForecastService {\r\n\r\n  forecastUrl = 'https://api.openweathermap.org/data/2.5/forecast?';\r\n  appId= 'appid=76d1b43ba3695cfae59aa9f7dc9b4877'\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\nlistForecast(cityid:any) {\r\n  let url = new String(this.forecastUrl);\r\n  url = url.concat(\"id=\",cityid, \"&\", this.appId, \"&units=metric\");\r\n  return this.http.get<[any]>(url.toString())\r\n}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}